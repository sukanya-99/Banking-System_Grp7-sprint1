        -:    0:Source:Password.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/************************************************************************************
        -:    3: *   FILENAME    :   Password.c
        -:    4: *
        -:    5: *   DESCRIPTION :   This file is used for masking and checking the password when and
        -:    6: *                   customer/user logging in
        -:    7: *
        -:    8: *   REVISION HISTORY
        -:    9: *
        -:   10: *   DATE            NAME             REASON
        -:   11: *
        -:   12: *  -------------------------------------------
        -:   13: *
        -:   14: *   25/05/2022    Username           Validate password
        -:   15: *
        -:   16: * ***********************************************************************************/
        -:   17:#include<stdio.h>  //Include all header files
        -:   18:#include<stdlib.h>
        -:   19:#include<string.h>
        -:   20:#include<termios.h>
        -:   21:#include<ctype.h>
        -:   22://#include "/home/cguser2/project_group5/cut/Code/Header/Header2.h"
        -:   23:#include "Function.h"
        -:   24:#define MAXPW 32
function password called 4 returned 100% blocks executed 49%
        4:   25:ssize_t password(char **pw,size_t sz,int mask,FILE *fp)
        -:   26:
        -:   27:{
       4*:   28:	if(!pw || !sz||!fp)return -1;   // validate input
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 4 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 4
        -:   29:#ifdef MAXPW
       4*:   30:	if(sz> MAXPW) sz=MAXPW;
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:   31:#endif
        -:   32:
        4:   33:	if(*pw==NULL)                // reallocate if no address
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:   34:	{
        -:   35:
    #####:   36:		void *tmp = realloc(*pw,sz * sizeof **pw);
    #####:   37:		if(!tmp)
branch  0 never executed
branch  1 never executed
    #####:   38:			return -1;
    #####:   39:		memset (tmp,0,sz);  // initialize memory to 0
    #####:   40:		*pw = (char*)tmp;
        -:   41:	}
        4:   42:	size_t idx = 0;         // index number of chars in read
        4:   43:	int c = 0;
        -:   44:	struct termios old_kbd_mode; // orig keyboard settings
        -:   45:	struct termios new_kbd_mode;
        4:   46:	if(tcgetattr (0,&old_kbd_mode)) // save orignal settings
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:   47:	{
    #####:   48:		fprintf(stderr, "%s() error: tcgetattr failed.\n",__func__);
call    0 never executed
call    1 never executed
    #####:   49:		return -1;
        -:   50:	}   // copy old to new
        4:   51:	memcpy(&new_kbd_mode, &old_kbd_mode,sizeof(struct termios));
        4:   52:	new_kbd_mode.c_lflag &= ~(ICANON | ECHO); //new kbd flags
        4:   53:	new_kbd_mode.c_cc[VTIME] = 0;
        4:   54:	new_kbd_mode.c_cc[VMIN] = 1;
        4:   55:	if(tcsetattr (0, TCSANOW, &new_kbd_mode)){
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:   56:		fprintf(stderr, "%s() error: tcsetattr failed.\n",__func__);
call    0 never executed
call    1 never executed
    #####:   57:		return -1;
        -:   58:	}
        -:   59:	// read chars from fp , mask if valid char specified
      14*:   60:	while(((c=fgetc(fp)) != '\n' && c != EOF && idx <sz - 1)||(idx ==sz - 1 && c==127))
call    0 returned 14
branch  1 taken 10 (fallthrough)
branch  2 taken 4
branch  3 taken 10 (fallthrough)
branch  4 taken 0
branch  5 taken 10
branch  6 taken 0 (fallthrough)
branch  7 taken 0 (fallthrough)
branch  8 taken 4
branch  9 never executed
branch 10 never executed
        -:   61:	{
       10:   62:		if(c != 127){
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:   63:			if(31 < mask && mask <127)//valid ascii char
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 10 (fallthrough)
branch  3 taken 0
       10:   64:				fputc(mask,stdout);
call    0 returned 10
call    1 returned 10
       10:   65:			(*pw)[idx++] = c;
        -:   66:		}
    #####:   67:		else if(idx > 0)  //handle backspace (del)
branch  0 never executed
branch  1 never executed
        -:   68:		{
    #####:   69:			if (31 < mask && mask < 127){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   70:				fputc(0x8,stdout);
call    0 never executed
call    1 never executed
    #####:   71:				fputc(' ',stdout);
call    0 never executed
call    1 never executed
    #####:   72:				fputc(0x8,stdout);
call    0 never executed
call    1 never executed
        -:   73:			}
    #####:   74:			(*pw)[--idx] = 0;
        -:   75:		}
        -:   76:	}
        4:   77:	(*pw)[idx] = 0; // null-terminate
        -:   78:	// reset original keyboard
        4:   79:	if(tcsetattr(0,TCSANOW,&old_kbd_mode)){
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:   80:		fprintf(stderr,"%s() error: tcsetattr failed.\n",__func__);
call    0 never executed
call    1 never executed
    #####:   81:		return 1;
        -:   82:	}
       4*:   83:	if(idx == sz-1 && c!='\n')  // warn if pw truncate
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 never executed
branch  3 never executed
    #####:   84:		fprintf(stderr,"(%s() warning: truncated at %zu chars.)\n",__func__,sz -1);
call    0 never executed
call    1 never executed
        4:   85:	return idx;  // number of chars in password
        -:   86:}
function checkpassword called 1 returned 100% blocks executed 80%
        1:   87:int checkpassword() //Validating passwords for banker corner
        -:   88:{
        1:   89:	char pw[MAXPW]={0};
        1:   90:	char *p=pw;
        -:   91:
        1:   92:	FILE *fp=stdin;
call    0 returned 1
        1:   93:	ssize_t nchr=0;
        1:   94:	nchr=password(&p,MAXPW,'*',fp);
call    0 returned 1
        -:   95:
        -:   96:	//Taking input for password
        1:   97:	printf("\nEnter password:\n");
call    0 returned 1
        1:   98:	nchr=password(&p,MAXPW,'*',fp);
call    0 returned 1
       1*:   99:	if(strcmp(p,"abc@123")==0 || strcmp(p,"xyz@345")==0) //checking the fixed password
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        -:  100:	{
        1:  101:		return 0;
        -:  102:	}
        -:  103:	else
        -:  104:	{
    #####:  105:		return 1;
        -:  106:	}
        -:  107:
        -:  108:
        -:  109:}
function getpassword called 1 returned 100% blocks executed 100%
        1:  110:char * getpassword()
        -:  111:{
        1:  112:	char pw[MAXPW]={0};
        1:  113:	pt=pw;
        -:  114:
        1:  115:	FILE *fp=stdin;
call    0 returned 1
        1:  116:	ssize_t nchr=0;
        1:  117:	nchr=password(&pt,MAXPW,'*',fp);
call    0 returned 1
        -:  118:	//Taking Input password
        1:  119:	printf("\nEnter passowrd:\n");
call    0 returned 1
        1:  120:	nchr=password(&pt,MAXPW,'*',fp);
call    0 returned 1
        1:  121:	return pt;
        -:  122:}
